[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Categorie",
        "importPath": "categorie.schemas",
        "description": "categorie.schemas",
        "isExtraImport": true,
        "detail": "categorie.schemas",
        "documentation": {}
    },
    {
        "label": "CategorieId",
        "importPath": "categorie.schemas",
        "description": "categorie.schemas",
        "isExtraImport": true,
        "detail": "categorie.schemas",
        "documentation": {}
    },
    {
        "label": "Categorie",
        "importPath": "categorie.schemas",
        "description": "categorie.schemas",
        "isExtraImport": true,
        "detail": "categorie.schemas",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Categorie_tab",
        "importPath": "categorie.models",
        "description": "categorie.models",
        "isExtraImport": true,
        "detail": "categorie.models",
        "documentation": {}
    },
    {
        "label": "Categorie_tab",
        "importPath": "categorie.models",
        "description": "categorie.models",
        "isExtraImport": true,
        "detail": "categorie.models",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Livre_tab",
        "importPath": "livre.models",
        "description": "livre.models",
        "isExtraImport": true,
        "detail": "livre.models",
        "documentation": {}
    },
    {
        "label": "Livre_categorie",
        "importPath": "livre.schemas",
        "description": "livre.schemas",
        "isExtraImport": true,
        "detail": "livre.schemas",
        "documentation": {}
    },
    {
        "label": "Livre",
        "importPath": "livre.schemas",
        "description": "livre.schemas",
        "isExtraImport": true,
        "detail": "livre.schemas",
        "documentation": {}
    },
    {
        "label": "LivreId",
        "importPath": "livre.schemas",
        "description": "livre.schemas",
        "isExtraImport": true,
        "detail": "livre.schemas",
        "documentation": {}
    },
    {
        "label": "categorie.crud",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "delete_categorie",
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "isExtraImport": true,
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "update_categorie",
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "isExtraImport": true,
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "livre.crud",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "get_categorie_by_id",
        "kind": 2,
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "peekOfCode": "def get_categorie_by_id(id: int, db: Session = Depends(get_db)) -> CategorieId:\n    return db.query(Categorie_tab).filter(\n        Categorie_tab.id_categorie == id\n    ).first()\n@categrie_router.get(\"/categorie/{id}\", tags=[\"Categorie\"])\ndef read_categorie(id:int, db: Session = Depends(get_db)) -> CategorieId:\n    categ = get_categorie_by_id(id, db)\n    if categ is None:\n        raise HTTPException(404, \"Categorie not found\")\n    return categ",
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "read_categorie",
        "kind": 2,
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "peekOfCode": "def read_categorie(id:int, db: Session = Depends(get_db)) -> CategorieId:\n    categ = get_categorie_by_id(id, db)\n    if categ is None:\n        raise HTTPException(404, \"Categorie not found\")\n    return categ\n@categrie_router.get(\"/categories\", tags=[\"Categorie\"])\ndef read_categories(skip:int=0, limit:int=5, db: Session = Depends(get_db)) -> list[CategorieId]:\n    return db.query(Categorie_tab).offset(skip).limit(limit).all()\n# ========================REQUETTE_POST===============================\n@categrie_router.post(\"/categorie\", tags=[\"Categorie\"])",
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "read_categories",
        "kind": 2,
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "peekOfCode": "def read_categories(skip:int=0, limit:int=5, db: Session = Depends(get_db)) -> list[CategorieId]:\n    return db.query(Categorie_tab).offset(skip).limit(limit).all()\n# ========================REQUETTE_POST===============================\n@categrie_router.post(\"/categorie\", tags=[\"Categorie\"])\ndef create_categorie(cat_input: Categorie, db: Session = Depends(get_db)) -> CategorieId:\n    # new_id = db.query(func.max(Categorie_tab.id_categorie)).scalar() + 1\n    categ = Categorie_tab(nom=cat_input.nom, lien=cat_input.lien)\n    db.add(categ)\n    db.commit()\n    db.refresh(categ)",
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "create_categorie",
        "kind": 2,
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "peekOfCode": "def create_categorie(cat_input: Categorie, db: Session = Depends(get_db)) -> CategorieId:\n    # new_id = db.query(func.max(Categorie_tab.id_categorie)).scalar() + 1\n    categ = Categorie_tab(nom=cat_input.nom, lien=cat_input.lien)\n    db.add(categ)\n    db.commit()\n    db.refresh(categ)\n    return categ\n# ========================REQUETTE_PUT===============================\n@categrie_router.put(\"/categorie/{id}\", tags=[\"Categorie\"])\ndef update_categorie(id:int, new_categ:Categorie, db: Session = Depends(get_db)) -> CategorieId:",
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "update_categorie",
        "kind": 2,
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "peekOfCode": "def update_categorie(id:int, new_categ:Categorie, db: Session = Depends(get_db)) -> CategorieId:\n    categ = get_categorie_by_id(id, db)\n    if categ is None:\n        raise HTTPException(404, \"categorie not found\")\n    categ.nom = new_categ.nom\n    categ.lien = new_categ.lien\n    db.commit()\n    return categ\n# ========================REQUETTE_DELETE===============================\n@categrie_router.delete(\"/categorie/{id}\", tags=[\"Categorie\"])",
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "delete_categorie",
        "kind": 2,
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "peekOfCode": "def delete_categorie(id:int, db: Session = Depends(get_db)) -> CategorieId:\n    # categ = db.query(Categorie_tab).filter(Categorie_tab.id_categorie == id).first()\n    categ = get_categorie_by_id(id, db)\n    if categ is None:\n        raise HTTPException(404, \"Categorie not found\")\n    db.delete(categ)\n    db.commit()\n    return categ",
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "categrie_router",
        "kind": 5,
        "importPath": "categorie.crud",
        "description": "categorie.crud",
        "peekOfCode": "categrie_router = APIRouter()\n# api = FastAPI()\n# @categrie_router.get(\"/\")\n# def get_index():\n#     return {\"message\" : \"Bienvenue sur mon application de gestion de bibliothèque\"}\n# ========================REQUETTE_GET===============================\ndef get_categorie_by_id(id: int, db: Session = Depends(get_db)) -> CategorieId:\n    return db.query(Categorie_tab).filter(\n        Categorie_tab.id_categorie == id\n    ).first()",
        "detail": "categorie.crud",
        "documentation": {}
    },
    {
        "label": "Categorie_tab",
        "kind": 6,
        "importPath": "categorie.models",
        "description": "categorie.models",
        "peekOfCode": "class Categorie_tab(Base):\n    __tablename__ = \"categorie\"\n    id_categorie = Column(Integer, primary_key=True, index=True)\n    nom = Column(String, nullable=False)\n    lien = Column(String)\n    livre = relationship(\"Livre_tab\", back_populates=\"categorie\")",
        "detail": "categorie.models",
        "documentation": {}
    },
    {
        "label": "Categorie",
        "kind": 6,
        "importPath": "categorie.schemas",
        "description": "categorie.schemas",
        "peekOfCode": "class Categorie(BaseModel):\n    nom: str\n    lien: str\nclass CategorieId(Categorie):\n    id_categorie: int\n    class Config:\n        orm_mode = True",
        "detail": "categorie.schemas",
        "documentation": {}
    },
    {
        "label": "CategorieId",
        "kind": 6,
        "importPath": "categorie.schemas",
        "description": "categorie.schemas",
        "peekOfCode": "class CategorieId(Categorie):\n    id_categorie: int\n    class Config:\n        orm_mode = True",
        "detail": "categorie.schemas",
        "documentation": {}
    },
    {
        "label": "get_livre_by_id",
        "kind": 2,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "peekOfCode": "def get_livre_by_id(id:int, db: Session = Depends(get_db)):\n    return db.query(Livre_tab).filter(Livre_tab.id_livre == id).first()\n@livre_router.get(\"/livre/{id}\", tags=[\"Livre\"])\ndef read_livre(id: int, db: Session = Depends(get_db)) -> LivreId:\n    livre = get_livre_by_id(id, db)\n    if livre is None:\n        raise HTTPException(404, \"Livre not found\")\n    return livre\n@livre_router.get(\"/livres\", tags=[\"Livre\"])\ndef read_livres(skip:int=0, limit:int=5, db: Session = Depends(get_db)) -> LivreId:",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "read_livre",
        "kind": 2,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "peekOfCode": "def read_livre(id: int, db: Session = Depends(get_db)) -> LivreId:\n    livre = get_livre_by_id(id, db)\n    if livre is None:\n        raise HTTPException(404, \"Livre not found\")\n    return livre\n@livre_router.get(\"/livres\", tags=[\"Livre\"])\ndef read_livres(skip:int=0, limit:int=5, db: Session = Depends(get_db)) -> LivreId:\n    return db.query(Livre_tab).offset(skip).limit(limit).all()\n# ===============LIVRE_POST===================================================\n@livre_router.post(\"/livre\", tags=[\"Livre\"])",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "read_livres",
        "kind": 2,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "peekOfCode": "def read_livres(skip:int=0, limit:int=5, db: Session = Depends(get_db)) -> LivreId:\n    return db.query(Livre_tab).offset(skip).limit(limit).all()\n# ===============LIVRE_POST===================================================\n@livre_router.post(\"/livre\", tags=[\"Livre\"])\ndef create_livre(livre_input: Livre, db: Session = Depends(get_db)) -> LivreId:\n    # id = db.query(func.max(Livre_tab.id_livre)).scalar() + 1\n    # livre = Livre_tab(id_categorie=livre_input.id_categorie, nom=livre_input.nom, prix=livre_input.prix,\n    #                   disponibilite=livre_input.disponibilite, note=livre_input.note, code_upc=livre_input.code_upc,\n    #                   description=livre_input.description, image_url=livre_input.image_url, lien=livre_input.lien)\n    livre = Livre_tab(**livre_input.model_dump())",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "create_livre",
        "kind": 2,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "peekOfCode": "def create_livre(livre_input: Livre, db: Session = Depends(get_db)) -> LivreId:\n    # id = db.query(func.max(Livre_tab.id_livre)).scalar() + 1\n    # livre = Livre_tab(id_categorie=livre_input.id_categorie, nom=livre_input.nom, prix=livre_input.prix,\n    #                   disponibilite=livre_input.disponibilite, note=livre_input.note, code_upc=livre_input.code_upc,\n    #                   description=livre_input.description, image_url=livre_input.image_url, lien=livre_input.lien)\n    livre = Livre_tab(**livre_input.model_dump())\n    db.add(livre)\n    db.commit()\n    db.refresh(livre)\n    return livre",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "update_livre",
        "kind": 2,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "peekOfCode": "def update_livre(id:int, livre_update:Livre, db: Session = Depends(get_db)) -> LivreId:\n    livre = get_livre_by_id(id, db)\n    if livre is None:\n        raise HTTPException(404, \"Livre not found\")\n    livre.id_categorie=livre_update.id_categorie\n    livre.nom=livre_update.nom\n    livre.prix=livre_update.prix\n    livre.disponibilite=livre_update.disponibilite\n    livre.note=livre_update.note\n    livre.code_upc=livre_update.code_upc",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "delete_livre",
        "kind": 2,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "peekOfCode": "def delete_livre(id:int, db: Session = Depends(get_db)) -> LivreId:\n    livre = get_livre_by_id(id, db)\n    if livre is None:\n        raise HTTPException(404, \"Livre not found\")\n    db.delete(livre)\n    db.commit()\n    return livre\n@livre_router.get(\"/categorie/livre/{categorie_input}\", tags=[\"Categorie_Livre\"])\ndef read_livre_by_categorie(categorie_input:str=\"Mystery\", db: Session = Depends(get_db)) -> list[Livre_categorie]:\n    livre = db.query(Livre_tab).join(Livre_tab.categorie).filter(Categorie_tab.nom.ilike(f\"%{categorie_input}%\")).limit(5).all()",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "read_livre_by_categorie",
        "kind": 2,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "peekOfCode": "def read_livre_by_categorie(categorie_input:str=\"Mystery\", db: Session = Depends(get_db)) -> list[Livre_categorie]:\n    livre = db.query(Livre_tab).join(Livre_tab.categorie).filter(Categorie_tab.nom.ilike(f\"%{categorie_input}%\")).limit(5).all()\n    if not livre:\n        raise HTTPException(404, f\"{categorie_input} not among categories\")\n    return livre\n@livre_router.get(\"/categorie/livre/{nom_input}\", tags=[\"Categorie_Livre\"])\ndef read_livre_by_name(nom_input:str=\"Le monde magique de Lili\", db: Session = Depends(get_db)) -> Livre_categorie:\n    livre = db.query(Livre_tab).join(Livre_tab.categorie).filter(Livre_tab.nom.ilike(f\"%{nom_input}%\")).all()\n    if not livre:\n        raise HTTPException(404, f\"{nom_input} is not among books\")",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "read_livre_by_name",
        "kind": 2,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "peekOfCode": "def read_livre_by_name(nom_input:str=\"Le monde magique de Lili\", db: Session = Depends(get_db)) -> Livre_categorie:\n    livre = db.query(Livre_tab).join(Livre_tab.categorie).filter(Livre_tab.nom.ilike(f\"%{nom_input}%\")).all()\n    if not livre:\n        raise HTTPException(404, f\"{nom_input} is not among books\")\n    return livre",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "livre_router",
        "kind": 5,
        "importPath": "livre.crud",
        "description": "livre.crud",
        "peekOfCode": "livre_router = APIRouter()\n# ===============LIVRE_GET===================================================\ndef get_livre_by_id(id:int, db: Session = Depends(get_db)):\n    return db.query(Livre_tab).filter(Livre_tab.id_livre == id).first()\n@livre_router.get(\"/livre/{id}\", tags=[\"Livre\"])\ndef read_livre(id: int, db: Session = Depends(get_db)) -> LivreId:\n    livre = get_livre_by_id(id, db)\n    if livre is None:\n        raise HTTPException(404, \"Livre not found\")\n    return livre",
        "detail": "livre.crud",
        "documentation": {}
    },
    {
        "label": "Livre_tab",
        "kind": 6,
        "importPath": "livre.models",
        "description": "livre.models",
        "peekOfCode": "class Livre_tab(Base):\n    __tablename__ = \"livre\"\n    id_livre = Column(Integer, primary_key=True, index=True)\n    id_categorie = Column(Integer, ForeignKey(\"categorie.id_categorie\"))\n    nom = Column(String, nullable=False)\n    prix = Column(Float)\n    disponibilite = Column(Integer)\n    note = Column(Integer)\n    code_upc = Column(String)\n    description = Column(String)",
        "detail": "livre.models",
        "documentation": {}
    },
    {
        "label": "Livre",
        "kind": 6,
        "importPath": "livre.schemas",
        "description": "livre.schemas",
        "peekOfCode": "class Livre(BaseModel):\n    id_categorie: int\n    nom: str\n    prix: float\n    disponibilite: int\n    note: int\n    code_upc: str\n    description: str\n    image_url: str\n    lien: str",
        "detail": "livre.schemas",
        "documentation": {}
    },
    {
        "label": "LivreId",
        "kind": 6,
        "importPath": "livre.schemas",
        "description": "livre.schemas",
        "peekOfCode": "class LivreId(Livre):\n    id_livre: int\n    class Config:\n        orm_mode = True\nclass Livre_categorie(BaseModel):\n    nom: str\n    prix: float\n    note: int\n    disponibilite: int\n    categorie: Categorie",
        "detail": "livre.schemas",
        "documentation": {}
    },
    {
        "label": "Livre_categorie",
        "kind": 6,
        "importPath": "livre.schemas",
        "description": "livre.schemas",
        "peekOfCode": "class Livre_categorie(BaseModel):\n    nom: str\n    prix: float\n    note: int\n    disponibilite: int\n    categorie: Categorie\n    class Config:\n        orm_mode = True",
        "detail": "livre.schemas",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "load = load_dotenv(dotenv_path=\"../database/.env\")\nDATABASE = os.getenv(\"DATABASE\")\nUSER = os.getenv(\"USER\")\nPASSWORD = os.getenv(\"PASSWORD\")\nHOST = os.getenv(\"HOST\")\nPORT = os.getenv(\"PORT\")\nDATABASE_URL = f\"postgresql://{USER}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "DATABASE",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DATABASE = os.getenv(\"DATABASE\")\nUSER = os.getenv(\"USER\")\nPASSWORD = os.getenv(\"PASSWORD\")\nHOST = os.getenv(\"HOST\")\nPORT = os.getenv(\"PORT\")\nDATABASE_URL = f\"postgresql://{USER}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "USER",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "USER = os.getenv(\"USER\")\nPASSWORD = os.getenv(\"PASSWORD\")\nHOST = os.getenv(\"HOST\")\nPORT = os.getenv(\"PORT\")\nDATABASE_URL = f\"postgresql://{USER}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "PASSWORD = os.getenv(\"PASSWORD\")\nHOST = os.getenv(\"HOST\")\nPORT = os.getenv(\"PORT\")\nDATABASE_URL = f\"postgresql://{USER}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "HOST = os.getenv(\"HOST\")\nPORT = os.getenv(\"PORT\")\nDATABASE_URL = f\"postgresql://{USER}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "PORT = os.getenv(\"PORT\")\nDATABASE_URL = f\"postgresql://{USER}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DATABASE_URL = f\"postgresql://{USER}:{PASSWORD}@{HOST}:{PORT}/{DATABASE}\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"API : Gestion de Bibliothèque\")\napp.include_router(categorie.crud.categrie_router)\napp.include_router(livre.crud.livre_router)",
        "detail": "main",
        "documentation": {}
    }
]